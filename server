use std::net::{TcpListener, TcpStream};
use std::io::{BufRead, BufReader, Write, Error};
use std::sync::{Arc, Mutex};
use std::thread;
use std::sync::mpsc::{self, Sender};

fn handle_client(stream: TcpStream, client_id: usize, tx: Sender<(usize, String)>, clients: Arc<Mutex<Vec<(usize, TcpStream)>>>) -> Result<(), Error> {
    println!("Client {} connected from: {}", client_id, stream.peer_addr()?);

    let cloned_stream = stream.try_clone()?;
    let mut reader = BufReader::new(cloned_stream);
    let mut buffer = String::new();

    {
        let mut clients = clients.lock().unwrap();
        clients.push((client_id, stream.try_clone()?));
    }

    loop {
        if reader.read_line(&mut buffer)? == 0 {
            println!("Client {} disconnected.", client_id);
            {
                let mut clients = clients.lock().unwrap();
                clients.retain(|(id, _)| *id != client_id);
            }
            notify_clients(client_id, &format!("Client {} disconnected.", client_id), &clients);
            return Ok(());
        }

        let received = buffer.trim().to_string();
        println!("Message received from client {}: {}", client_id, received);

        if received == "quit" {
            println!("Client {} requested to close the connection.", client_id);
            {
                let mut clients = clients.lock().unwrap();
                clients.retain(|(id, _)| *id != client_id);
            }
            notify_clients(client_id, &format!("Client {} disconnected.", client_id), &clients);
            return Ok(());
        }

        //Send the acknowledgment to the sender client
        let mut sender_stream = stream.try_clone()?;
        writeln!(sender_stream, "Message is received ")?;

        //Send the message to other clients
        tx.send((client_id, received.clone())).unwrap();
        buffer.clear();
    }
}

fn notify_clients(sender_id: usize, message: &str, clients: &Arc<Mutex<Vec<(usize, TcpStream)>>>){
    let clients = clients.lock().unwrap();
    for (id, client) in clients.iter() {
        if *id != sender_id {
            let mut client = client.try_clone().unwrap();
            writeln!(client, "{}", message).unwrap();
        }
    }
}

fn main() -> Result<(), Error> {
    let listener = TcpListener::bind("0.0.0.0:8888")?;
    println!("Server listening on port 8888");

    let (tx, rx): (Sender<(usize, String)>, _) = mpsc::channel();
    let clients = Arc::new(Mutex::new(Vec::<(usize, TcpStream)>::new()));
    let clients_for_thread = Arc::clone(&clients);

    // Message processing thread
    thread::spawn(move || {
        for (client_id, message) in rx {
            let clients = clients_for_thread.lock().unwrap();
            for (id, client) in clients.iter() {
                if *id != client_id {
                    let mut client = client.try_clone().unwrap();
                    writeln!(client, "Client {}: {}", client_id, message).unwrap();
                }
            }
        }
    });

    let mut client_id = 0;

    for stream in listener.incoming() {
        match stream {
            Err(e) => eprintln!("failed: {}", e),
            Ok(stream) => {
                client_id += 1;
                let tx = tx.clone();
                let clients = Arc::clone(&clients);
                thread::spawn(move || {
                    if let Err(err) = handle_client(stream, client_id, tx, clients) {
                        eprintln!("Error handling client {}: {}", client_id, err);
                    }
                });
            }
        }
    }

    Ok(())
}
